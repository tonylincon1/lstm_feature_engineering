{"cells":[{"cell_type":"markdown","metadata":{"id":"S1SjD-NU1pmB"},"source":["# Preparações"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14509,"status":"ok","timestamp":1656723361098,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"9srDpcwJk3ob","outputId":"2cf22179-6aef-4711-9c09-ed3430e6abbe"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting catboost\n","  Downloading catboost-1.0.6-cp37-none-manylinux1_x86_64.whl (76.6 MB)\n","\u001b[K     |████████████████████████████████| 76.6 MB 158 kB/s \n","\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.3.5)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.21.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (5.5.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.4.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2022.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (3.0.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.4.3)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->catboost) (4.1.1)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (8.0.1)\n","Installing collected packages: catboost\n","Successfully installed catboost-1.0.6\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: xgboost in /usr/local/lib/python3.7/dist-packages (0.90)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.21.6)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.4.1)\n"]}],"source":["!pip install catboost\n","!pip install xgboost"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"elapsed":537,"status":"ok","timestamp":1656723431921,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"TA9o4Sc6Qc6I","outputId":"0140c464-3321-4833-c012-5e759f444204"},"outputs":[{"output_type":"display_data","data":{"text/html":["        <script type=\"text/javascript\">\n","        window.PlotlyConfig = {MathJaxConfig: 'local'};\n","        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n","        if (typeof require !== 'undefined') {\n","        require.undef(\"plotly\");\n","        requirejs.config({\n","            paths: {\n","                'plotly': ['https://cdn.plot.ly/plotly-2.8.3.min']\n","            }\n","        });\n","        require(['plotly'], function(Plotly) {\n","            window._Plotly = Plotly;\n","        });\n","        }\n","        </script>\n","        "]},"metadata":{}}],"source":["%matplotlib inline\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas_profiling\n","import cufflinks as cf\n","import plotly.offline\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.ensemble import RandomForestClassifier\n","import lightgbm as lgb\n","from catboost import CatBoostClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","import xgboost as xgb\n","from sklearn.ensemble import VotingClassifier\n","cf.go_offline()\n","cf.set_config_file(offline=False, world_readable=True)\n","pd.set_option('display.max_columns', 38)"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20776,"status":"ok","timestamp":1656723392779,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"pbmv4QPG2mlV","outputId":"efa39e6f-232d-42b8-c801-79d2cd8667b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"EzuQlWAIdlLY"},"source":["# Preparação"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":2339,"status":"ok","timestamp":1656723437153,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"SmglVpXXQx7w"},"outputs":[],"source":["train_values = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/Richter's Predictor: Modeling Earthquake Damage/data/train_values.csv\", index_col='building_id')"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1656723437154,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"-owqop2mQ46i"},"outputs":[],"source":["train_labels = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/Richter's Predictor: Modeling Earthquake Damage/data/train_labels.csv\", index_col='building_id')"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":1255,"status":"ok","timestamp":1656723438402,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"ySZDbujXdFdB"},"outputs":[],"source":["test_values = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/Richter's Predictor: Modeling Earthquake Damage/data/test_values.csv\", index_col='building_id')"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1656723438402,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"71GSlzD9Q7cY","outputId":"2dcf06d3-a6b3-420e-8f02-14d41731de8d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             geo_level_1_id  geo_level_2_id  geo_level_3_id  \\\n","building_id                                                   \n","802906                    6             487           12198   \n","28830                     8             900            2812   \n","94947                    21             363            8973   \n","590882                   22             418           10694   \n","201944                   11             131            1488   \n","\n","             count_floors_pre_eq  age  area_percentage  height_percentage  \\\n","building_id                                                                 \n","802906                         2   30                6                  5   \n","28830                          2   10                8                  7   \n","94947                          2   10                5                  5   \n","590882                         2   10                6                  5   \n","201944                         3   30                8                  9   \n","\n","            land_surface_condition foundation_type roof_type  \\\n","building_id                                                    \n","802906                           t               r         n   \n","28830                            o               r         n   \n","94947                            t               r         n   \n","590882                           t               r         n   \n","201944                           t               r         n   \n","\n","            ground_floor_type other_floor_type position plan_configuration  \\\n","building_id                                                                  \n","802906                      f                q        t                  d   \n","28830                       x                q        s                  d   \n","94947                       f                x        t                  d   \n","590882                      f                x        s                  d   \n","201944                      f                x        s                  d   \n","\n","             has_superstructure_adobe_mud  \\\n","building_id                                 \n","802906                                  1   \n","28830                                   0   \n","94947                                   0   \n","590882                                  0   \n","201944                                  1   \n","\n","             has_superstructure_mud_mortar_stone  \\\n","building_id                                        \n","802906                                         1   \n","28830                                          1   \n","94947                                          1   \n","590882                                         1   \n","201944                                         0   \n","\n","             has_superstructure_stone_flag  \\\n","building_id                                  \n","802906                                   0   \n","28830                                    0   \n","94947                                    0   \n","590882                                   0   \n","201944                                   0   \n","\n","             has_superstructure_cement_mortar_stone  \\\n","building_id                                           \n","802906                                            0   \n","28830                                             0   \n","94947                                             0   \n","590882                                            0   \n","201944                                            0   \n","\n","             has_superstructure_mud_mortar_brick  \\\n","building_id                                        \n","802906                                         0   \n","28830                                          0   \n","94947                                          0   \n","590882                                         0   \n","201944                                         0   \n","\n","             has_superstructure_cement_mortar_brick  \\\n","building_id                                           \n","802906                                            0   \n","28830                                             0   \n","94947                                             0   \n","590882                                            0   \n","201944                                            0   \n","\n","             has_superstructure_timber  has_superstructure_bamboo  \\\n","building_id                                                         \n","802906                               0                          0   \n","28830                                0                          0   \n","94947                                0                          0   \n","590882                               1                          1   \n","201944                               0                          0   \n","\n","             has_superstructure_rc_non_engineered  \\\n","building_id                                         \n","802906                                          0   \n","28830                                           0   \n","94947                                           0   \n","590882                                          0   \n","201944                                          0   \n","\n","             has_superstructure_rc_engineered  has_superstructure_other  \\\n","building_id                                                               \n","802906                                      0                         0   \n","28830                                       0                         0   \n","94947                                       0                         0   \n","590882                                      0                         0   \n","201944                                      0                         0   \n","\n","            legal_ownership_status  count_families  has_secondary_use  \\\n","building_id                                                             \n","802906                           v               1                  0   \n","28830                            v               1                  0   \n","94947                            v               1                  0   \n","590882                           v               1                  0   \n","201944                           v               1                  0   \n","\n","             has_secondary_use_agriculture  has_secondary_use_hotel  \\\n","building_id                                                           \n","802906                                   0                        0   \n","28830                                    0                        0   \n","94947                                    0                        0   \n","590882                                   0                        0   \n","201944                                   0                        0   \n","\n","             has_secondary_use_rental  has_secondary_use_institution  \\\n","building_id                                                            \n","802906                              0                              0   \n","28830                               0                              0   \n","94947                               0                              0   \n","590882                              0                              0   \n","201944                              0                              0   \n","\n","             has_secondary_use_school  has_secondary_use_industry  \\\n","building_id                                                         \n","802906                              0                           0   \n","28830                               0                           0   \n","94947                               0                           0   \n","590882                              0                           0   \n","201944                              0                           0   \n","\n","             has_secondary_use_health_post  has_secondary_use_gov_office  \\\n","building_id                                                                \n","802906                                   0                             0   \n","28830                                    0                             0   \n","94947                                    0                             0   \n","590882                                   0                             0   \n","201944                                   0                             0   \n","\n","             has_secondary_use_use_police  has_secondary_use_other  \n","building_id                                                         \n","802906                                  0                        0  \n","28830                                   0                        0  \n","94947                                   0                        0  \n","590882                                  0                        0  \n","201944                                  0                        0  "],"text/html":["\n","  <div id=\"df-a44bdac8-e06a-4aa7-ac40-08dd59baba83\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>geo_level_1_id</th>\n","      <th>geo_level_2_id</th>\n","      <th>geo_level_3_id</th>\n","      <th>count_floors_pre_eq</th>\n","      <th>age</th>\n","      <th>area_percentage</th>\n","      <th>height_percentage</th>\n","      <th>land_surface_condition</th>\n","      <th>foundation_type</th>\n","      <th>roof_type</th>\n","      <th>ground_floor_type</th>\n","      <th>other_floor_type</th>\n","      <th>position</th>\n","      <th>plan_configuration</th>\n","      <th>has_superstructure_adobe_mud</th>\n","      <th>has_superstructure_mud_mortar_stone</th>\n","      <th>has_superstructure_stone_flag</th>\n","      <th>has_superstructure_cement_mortar_stone</th>\n","      <th>has_superstructure_mud_mortar_brick</th>\n","      <th>has_superstructure_cement_mortar_brick</th>\n","      <th>has_superstructure_timber</th>\n","      <th>has_superstructure_bamboo</th>\n","      <th>has_superstructure_rc_non_engineered</th>\n","      <th>has_superstructure_rc_engineered</th>\n","      <th>has_superstructure_other</th>\n","      <th>legal_ownership_status</th>\n","      <th>count_families</th>\n","      <th>has_secondary_use</th>\n","      <th>has_secondary_use_agriculture</th>\n","      <th>has_secondary_use_hotel</th>\n","      <th>has_secondary_use_rental</th>\n","      <th>has_secondary_use_institution</th>\n","      <th>has_secondary_use_school</th>\n","      <th>has_secondary_use_industry</th>\n","      <th>has_secondary_use_health_post</th>\n","      <th>has_secondary_use_gov_office</th>\n","      <th>has_secondary_use_use_police</th>\n","      <th>has_secondary_use_other</th>\n","    </tr>\n","    <tr>\n","      <th>building_id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>802906</th>\n","      <td>6</td>\n","      <td>487</td>\n","      <td>12198</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>t</td>\n","      <td>r</td>\n","      <td>n</td>\n","      <td>f</td>\n","      <td>q</td>\n","      <td>t</td>\n","      <td>d</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>v</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>28830</th>\n","      <td>8</td>\n","      <td>900</td>\n","      <td>2812</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>7</td>\n","      <td>o</td>\n","      <td>r</td>\n","      <td>n</td>\n","      <td>x</td>\n","      <td>q</td>\n","      <td>s</td>\n","      <td>d</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>v</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>94947</th>\n","      <td>21</td>\n","      <td>363</td>\n","      <td>8973</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>t</td>\n","      <td>r</td>\n","      <td>n</td>\n","      <td>f</td>\n","      <td>x</td>\n","      <td>t</td>\n","      <td>d</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>v</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>590882</th>\n","      <td>22</td>\n","      <td>418</td>\n","      <td>10694</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>t</td>\n","      <td>r</td>\n","      <td>n</td>\n","      <td>f</td>\n","      <td>x</td>\n","      <td>s</td>\n","      <td>d</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>v</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>201944</th>\n","      <td>11</td>\n","      <td>131</td>\n","      <td>1488</td>\n","      <td>3</td>\n","      <td>30</td>\n","      <td>8</td>\n","      <td>9</td>\n","      <td>t</td>\n","      <td>r</td>\n","      <td>n</td>\n","      <td>f</td>\n","      <td>x</td>\n","      <td>s</td>\n","      <td>d</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>v</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a44bdac8-e06a-4aa7-ac40-08dd59baba83')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a44bdac8-e06a-4aa7-ac40-08dd59baba83 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a44bdac8-e06a-4aa7-ac40-08dd59baba83');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}],"source":["train_values.head()"]},{"cell_type":"markdown","metadata":{"id":"nFc4bb3ZoehJ"},"source":["# Ensemble Model lgb, cat, gradient, xgb"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1656723438402,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"2KbROcRgLm0K","outputId":"1b4d6b1c-67bd-45ef-eb52-317c86d70a26"},"outputs":[{"output_type":"stream","name":"stdout","text":["Sat Jul  2 01:00:19 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   41C    P0    28W / 250W |      0MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}],"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Not connected to a GPU')\n","else:\n","  print(gpu_info)"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1656723441241,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"jHXAwPP2tJwA","outputId":"0d065038-f265-4a91-a1f3-4c27cec18fe8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Resample the train test split & try these parameters set\n"]}],"source":["from sklearn.metrics import f1_score\n","\n","print(\"Resample the train test split & try these parameters set\")\n","X = train_values; y = train_labels\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n","\n","dummies1 = pd.get_dummies(X_train[[\"land_surface_condition\", \"foundation_type\", \"roof_type\", \"ground_floor_type\", \"other_floor_type\", \"position\", \"plan_configuration\", \"legal_ownership_status\"]])\n","dummies2 = pd.get_dummies(X_test[[\"land_surface_condition\", \"foundation_type\", \"roof_type\", \"ground_floor_type\", \"other_floor_type\", \"position\", \"plan_configuration\", \"legal_ownership_status\"]])\n","\n","X_train = X_train.drop([\"land_surface_condition\", \"foundation_type\", \"roof_type\", \"ground_floor_type\", \"other_floor_type\", \"position\", \"plan_configuration\", \"legal_ownership_status\"], axis = 1)\n","X_test = X_test.drop([\"land_surface_condition\", \"foundation_type\", \"roof_type\", \"ground_floor_type\", \"other_floor_type\", \"position\", \"plan_configuration\", \"legal_ownership_status\"], axis = 1)\n","\n","X_train = pd.concat([X_train, dummies1], axis=1)\n","X_test = pd.concat([X_test, dummies2], axis=1)"]},{"cell_type":"code","source":["rf = RandomForestClassifier(n_estimators = 500,random_state = 1, max_depth=None,n_jobs=-1)\n","rf.fit(X_train,y_train)\n","predrf=rf.predict(X_test)\n","\n","#f1 score is the metric used in the competition\n","accuracy1=f1_score(y_test,predrf,average='micro')\n","print(\"Score on test set\")\n","print(\"\\n ========================================================\")\n","print(accuracy1)\n","print('\\n Benchmark model was: 0.5815')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Z3HgR_oaBst","executionInfo":{"status":"ok","timestamp":1656723496833,"user_tz":180,"elapsed":50287,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"}},"outputId":"368d3169-a6f3-49ac-cd82-58fef402d017"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: DataConversionWarning:\n","\n","A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","\n"]},{"output_type":"stream","name":"stdout","text":["Score on test set\n","\n"," ========================================================\n","0.7172924540971969\n","\n"," Benchmark model was: 0.5815\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8252,"status":"ok","timestamp":1656639639759,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"},"user_tz":180},"id":"RmtUXnTumP5d","outputId":"e1c1a513-e2b9-411d-98e6-b657715ce6ce"},"outputs":[{"output_type":"stream","name":"stdout","text":["Score on test set\n","\n"," ========================================================\n","0.7382437021546018\n","\n"," Benchmark model was: 0.5815\n"]}],"source":["modellgb = lgb.LGBMClassifier(colsample_bytree=0.7, max_depth=25, min_split_gain=0.3,\n","               num_leaves=200, random_seed=42, reg_alpha=1.3, reg_lambda=1.1,\n","               subsample=0.9, subsample_freq=20)\n","modellgb.fit(X_train, y_train.values.ravel())\n","predslgb=modellgb.predict(X_test)\n","\n","#f1 score is the metric used in the competition\n","accuracy1=f1_score(y_test,predslgb,average='micro')\n","print(\"Score on test set\")\n","print(\"\\n ========================================================\")\n","print(accuracy1)\n","print('\\n Benchmark model was: 0.5815')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZigSAcZomxxQ","executionInfo":{"status":"ok","timestamp":1656634466206,"user_tz":180,"elapsed":266930,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"}},"outputId":"7402d2ee-a7d5-43f7-e23a-cd28a8338cc6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Score on test set\n","\n"," ========================================================\n","0.7355192724621553\n","\n"," Benchmark model was: 0.5815\n"]}],"source":["#input best params here from randm.best_params_\n","modelcat = CatBoostClassifier(eval_metric='TotalF1',random_seed=42, silent=True, task_type=\"GPU\",cat_features=list(X_train.columns), border_count=13, depth= 10, iterations = 5000, l2_leaf_reg = 3, learning_rate = 0.05)\n","modelcat.fit(X_train, y_train)\n","predscat=modelcat.predict(X_test)\n","\n","#f1 score is the metric used in the competition\n","accuracy1=f1_score(y_test,predscat,average='micro')\n","print(\"Score on test set\")\n","print(\"\\n ========================================================\")\n","print(accuracy1)\n","print('\\n Benchmark model was: 0.5815')"]},{"cell_type":"code","source":["#input best params here from randm.best_params_\n","\n","modelxgb_cl = xgb.XGBClassifier(random_state=42,objective='multi:softmax', gamma=0.001369048068388758, eta=0.11,\n","                  max_depth= 20,\n","                  min_child_weight=9,\n","                  num_class= 4,\n","                  subsample= .85,\n","                  colsample_bytree= .9, verbose=10)\n","modelxgb_cl.fit(X_train, y_train)\n","\n","predsxgb_cl=modelxgb_cl.predict(X_test)\n","\n","#f1 score is the metric used in the competition\n","accuracy1=f1_score(y_test,predsxgb_cl,average='micro')\n","print(\"Score on test set\")\n","print(\"\\n ========================================================\")\n","print(accuracy1)\n","print('\\n Benchmark model was: 0.5815')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CzAI-_v1Gypr","executionInfo":{"status":"ok","timestamp":1656635913881,"user_tz":180,"elapsed":683125,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"}},"outputId":"eb80a892-a043-46cf-91e6-6abbf9a66957"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:98: DataConversionWarning:\n","\n","A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:133: DataConversionWarning:\n","\n","A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","\n"]},{"output_type":"stream","name":"stdout","text":["Score on test set\n","\n"," ========================================================\n","0.7462251299859941\n","\n"," Benchmark model was: 0.5815\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOetoVQbPHtv","executionInfo":{"status":"ok","timestamp":1656639263569,"user_tz":180,"elapsed":890650,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"}},"outputId":"9369c861-b1d6-4fc6-c455-5c55b978bf1b"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:98: DataConversionWarning:\n","\n","A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:133: DataConversionWarning:\n","\n","A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","\n"]},{"output_type":"stream","name":"stdout","text":["[Voting] ...................... (1 of 3) Processing lgb, total=  18.9s\n","[Voting] ...................... (2 of 3) Processing cat, total= 3.2min\n","[Voting] ...................... (3 of 3) Processing xbg, total=11.3min\n","CPU times: user 16min 14s, sys: 2min 15s, total: 18min 29s\n","Wall time: 14min 50s\n"]}],"source":["%%time\n","\n","voting_clf = VotingClassifier(estimators=[('lgb', modellgb),\n","                                          ('cat', modelcat),\n","                                          ('xbg', modelxgb_cl)], voting='soft', verbose=10)\n","voting_clf.fit(X_train, y_train)"]},{"cell_type":"code","source":["predsvoting=voting_clf.predict(X_test)\n","\n","#f1 score is the metric used in the competition\n","accuracy1=f1_score(y_test,predsvoting,average='micro')\n","print(\"Score on test set\")\n","print(\"\\n ========================================================\")\n","print(accuracy1)\n","print('\\n Benchmark model was: 0.74749')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ELIih3vj6i1A","executionInfo":{"status":"ok","timestamp":1656639273370,"user_tz":180,"elapsed":9842,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"}},"outputId":"4a88124c-ee89-4878-e956-0be7abd47f3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Score on test set\n","\n"," ========================================================\n","0.7471268778419448\n","\n"," Benchmark model was: 0.74749\n"]}]},{"cell_type":"markdown","metadata":{"id":"r-I_07_3rzrD"},"source":["# Create Submission File"]},{"cell_type":"code","source":["dummies3 = pd.get_dummies(test_values[[\"land_surface_condition\", \"foundation_type\", \"roof_type\", \"ground_floor_type\", \"other_floor_type\", \"position\", \"plan_configuration\", \"legal_ownership_status\"]])\n","X_test1 = test_values.drop([\"land_surface_condition\", \"foundation_type\", \"roof_type\", \"ground_floor_type\", \"other_floor_type\", \"position\", \"plan_configuration\", \"legal_ownership_status\"], axis = 1)\n","X_test1 = pd.concat([X_test1, dummies3], axis=1)"],"metadata":{"id":"qki0zoTZ6w4n"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_6A91fUUmUWc"},"outputs":[],"source":["y_pred = voting_clf.predict(X_test1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O2j1Eb1jmlRD","executionInfo":{"status":"ok","timestamp":1656639340224,"user_tz":180,"elapsed":59,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"}},"outputId":"591d7bfd-b92b-4762-bfcc-07ec4eb1f8f8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 2, 2, ..., 2, 2, 2])"]},"metadata":{},"execution_count":38}],"source":["y_pred"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rVHw49-zsHQA"},"outputs":[],"source":["sub_csv = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/Richter's Predictor: Modeling Earthquake Damage/data/submission_format.csv\")\n","\n","sub_csv[\"damage_grade\"] = y_pred\n","sub_csv.to_csv(\"/content/drive/My Drive/Colab Notebooks/Richter's Predictor: Modeling Earthquake Damage/output/submit/ensemble_lgb_cat_gradient_xgb.csv\", index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"hz04gMK9x7q4","executionInfo":{"status":"ok","timestamp":1656639340227,"user_tz":180,"elapsed":51,"user":{"displayName":"Antonio Santos","userId":"03265893617080544823"}},"outputId":"3c46baf2-afea-49af-9dbc-1de86afa9039"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       building_id  damage_grade\n","0           300051             3\n","1            99355             2\n","2           890251             2\n","3           745817             1\n","4           421793             3\n","...            ...           ...\n","86863       310028             2\n","86864       663567             2\n","86865      1049160             2\n","86866       442785             2\n","86867       501372             2\n","\n","[86868 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-001aefe1-f146-40cc-b536-1c0d3e35dc2c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>building_id</th>\n","      <th>damage_grade</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>300051</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>99355</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>890251</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>745817</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>421793</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>86863</th>\n","      <td>310028</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>86864</th>\n","      <td>663567</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>86865</th>\n","      <td>1049160</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>86866</th>\n","      <td>442785</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>86867</th>\n","      <td>501372</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>86868 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-001aefe1-f146-40cc-b536-1c0d3e35dc2c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-001aefe1-f146-40cc-b536-1c0d3e35dc2c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-001aefe1-f146-40cc-b536-1c0d3e35dc2c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":40}],"source":["sub_csv"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FEav9KMuI6PE"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"background_execution":"on","collapsed_sections":["S1SjD-NU1pmB","EzuQlWAIdlLY"],"machine_shape":"hm","name":"Treinamento - Ensemble Model lgb, cat, xgb - F1Score 0.7470","provenance":[],"authorship_tag":"ABX9TyNAntwKdmEmCXitMxuUyKrm"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}